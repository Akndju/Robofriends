{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","constants.js","Components/Header.js","Containers/App.js","action.js","reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","card","props","className","width","height","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","Card","SearchBox","searchChange","style","paddingBottom","type","placeholder","onChange","Scroll","overflowY","border","children","ErrorBoundary","hasError","info","this","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3030ae05.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst card = (props) => {\r\n  return (\r\n    <div className=\"bg-washed-blue dib br3 pa3 ma2 grow bw2 shadow-3 tc\">\r\n      <img\r\n        width=\"150\"\r\n        height=\"150\"\r\n        alt=\"Robots\"\r\n        src={`https://robohash.org/${props.id}`}\r\n      />\r\n      <div>\r\n        <h3>{props.name}</h3>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default card;\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardArray = robots.map((user,i) => {\r\n        return (\r\n            <Card key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>)\r\n        })\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div style={{ paddingBottom: \"15px\" }}>\r\n      <input\r\n        className=\"pa2 ba b--black bg-white br3 tc bw0.8\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robot\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY: 'scroll', border: '2px solid black', height: '490px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n            this.state = {\r\n                hasError: false\r\n            }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.state ({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops, that's not supposed to happen</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1>RoboFriends</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../Components/CardList\";\r\n// import { robots } from \"../robots\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { requestRobots, setSearchField } from \"../action\";\r\nimport Header from \"../Components/Header\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if (isPending) {\r\n      return <h1>Please Wait...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        robots: action.payload,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        error: action.payload,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport App from \"./Containers/App\";\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducer\";\nimport { createLogger } from \"redux-logger\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}