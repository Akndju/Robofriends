{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","robots.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","props","className","width","height","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","Card","key","username","SearchBox","searchfield","searchChange","style","paddingBottom","type","placeholder","onChange","Scroll","overflowY","border","children","ErrorBoundary","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCCSC,EAhBF,SAACC,GACV,OACI,yBAAKC,UAAY,uDACb,yBAAKC,MAAQ,MAAMC,OAAS,MAAMC,IAAM,SAASC,IAAG,+BAA4BL,EAAMM,MACtF,6BACI,4BACKN,EAAMO,MAEX,2BACCP,EAAMQ,UCQRC,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OACI,kBAACC,EAAD,CAAMC,IAAKF,EACXR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAEzB,OACI,6BACKG,ICdAD,EAAU,CACnB,CACIJ,GAAI,EACJC,KAAM,kBACNU,SAAU,SACVT,MAAO,sBAEX,CACIF,GAAI,EACJC,KAAM,cACNU,SAAU,SACVT,MAAO,sBAEX,CACIF,GAAI,EACJC,KAAM,SACNU,SAAU,SACVT,MAAO,oBAEX,CACIF,GAAI,EACJC,KAAM,qBACNU,SAAU,eACVT,MAAO,0BAEX,CACIF,GAAI,EACJC,KAAM,gBACNU,SAAU,QACVT,MAAO,qBAEX,CACIF,GAAI,EACJC,KAAM,cACNU,SAAU,OACVT,MAAO,oBAEX,CACIF,GAAI,EACJC,KAAM,eACNU,SAAU,WACVT,MAAO,qBAEX,CACIF,GAAI,EACJC,KAAM,oBACNU,SAAU,UACVT,MAAO,sBCnCAU,EAVG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKC,MAAS,CAACC,cAAe,SAC1B,2BAAOrB,UAAY,wCACvBsB,KAAO,SAASC,YAAc,eAC9BC,SAAYL,MCGLM,EARA,SAAC1B,GACZ,OACI,yBAAKqB,MAAS,CAAEM,UAAW,SAAUC,OAAQ,kBAAmBzB,OAAQ,UACnEH,EAAM6B,WCiBJC,E,kDAnBX,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IACG+B,MAAQ,CACTC,UAAU,GAHH,E,8DAODC,EAAOC,GACrBC,KAAKJ,MAAO,CAACC,UAAU,M,+BAIvB,OAAIG,KAAKJ,MAAMC,SACJ,mEAEJG,KAAKnC,MAAM6B,a,GAhBEO,aCgDbC,G,wDAzCX,aAAgB,IAAD,8BACX,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SAb1C,EAAKX,MAAQ,CACTrB,OAAQA,EACRS,YAAa,IAJN,E,gEAQM,IAAD,OAChBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAE9B,OAAQA,S,+BAOhC,IAAD,OACAsC,EAAiBb,KAAKJ,MAAMrB,OAAOuC,QAAO,SAAAC,GAC5C,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMZ,YAAYgC,kBAEpE,OAAiC,IAA7BhB,KAAKJ,MAAMrB,OAAO2C,OACX,8CAGH,yBAAKpD,UAAW,MACZ,2CACA,kBAAC,EAAD,CAAWmB,aAAce,KAAKG,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAUsC,W,GAhC9BZ,cCAlBkB,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SR0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.145c6a86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst card = (props) => {\r\n    return(\r\n        <div className = 'bg-washed-blue dib br3 pa3 ma2 grow bw2 shadow-3 tc'>\r\n            <img width = \"150\" height = \"150\" alt = \"Robots\" src = {`https://robohash.org/${props.id}`}/>\r\n            <div>\r\n                <h3>\r\n                    {props.name}\r\n                </h3>\r\n                <p>\r\n                {props.email}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardArray = robots.map((user,i) => {\r\n        return (\r\n            <Card key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>)\r\n        })\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","export const robots =  [\r\n    {\r\n        id: 1,\r\n        name: 'Chris Convenant',\r\n        username: 'Baines',\r\n        email: 'Covenant@gmail.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Uweh George',\r\n        username: 'George',\r\n        email: 'GAHMNile@gmail.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Akndju',\r\n        username: 'Akndju',\r\n        email: 'Akndju@gmail.com'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'David Umokpokpokpo',\r\n        username: 'Umokpokpokpo',\r\n        email: 'Umokpokpokpo@gmail.com'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Sarah Towobee',\r\n        username: 'Sarah',\r\n        email: 'Teobola@gmail.com'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Fanny Anaso',\r\n        username: 'kene',\r\n        email: 'Fanaso@gmail.com'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Mmenim David',\r\n        username: 'Uwakmfon',\r\n        email: 'General@gmail.com'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Darlington Godwin',\r\n        username: 'Dannyto',\r\n        email: 'Dannyto@gmail.com'\r\n    },\r\n\r\n]","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div style = {{paddingBottom: '15px'}}>\r\n            <input className = 'pa2 ba b--black bg-white br3 tc bw0.8' \r\n        type = 'search' placeholder = 'Search Robot'\r\n        onChange = {searchChange}/>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY: 'scroll', border: '2px solid black', height: '490px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n            this.state = {\r\n                hasError: false\r\n            }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.state ({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops, that's not supposed to happen</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList'\r\nimport {robots} from '../robots';\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({ robots: robots}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render () {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Please Wait...</h1>\r\n        } else {\r\n            return (\r\n                <div className ='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots = {filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>  \r\n            );\r\n        }\r\n            }\r\n    }\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App'\n\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}